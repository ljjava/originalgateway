package com.jon.originalgateway;

import java.net.InetSocketAddress;
import java.net.URI;
import java.net.URISyntaxException;

import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter;

import static org.springframework.cloud.gateway.support.ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.core.Ordered;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.http.server.reactive.ServerHttpRequestDecorator;
import org.springframework.http.server.reactive.ServerHttpResponseDecorator;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.util.UriComponentsBuilder;
import org.springframework.util.MultiValueMap;

@Component
public class CustGatewayFilterFactory extends AbstractGatewayFilterFactory<CustGatewayFilterFactory.Config> implements Ordered{

    public CustGatewayFilterFactory() {
        super(Config.class);
    }

    @Override
    public GatewayFilter apply(Config config) {
        return (exchange, chain) -> {
            // 获取原始请求
            ServerHttpRequest request = exchange.getRequest();

            // 获取原始请求的路径
            String path = request.getURI().getPath();

            // 检查路径是否匹配 /loadbalance/**
            if (path.startsWith("/loadbalance/")) {
                // 移除 /loadbalance/ 前缀
                String newPath = path.substring("/loadbalance/".length());

                // 创建新的 URI
                URI newUri = URI.create("http://localhost:8081/" + newPath);

                // 修改请求 URI
                ServerHttpRequest modifiedRequest = request.mutate().uri(newUri).build();

                // 使用修改后的请求创建新的 ServerWebExchange
                ServerWebExchange modifiedExchange = exchange.mutate().request(modifiedRequest).build();

                // 设置 GATEWAY_REQUEST_URL_ATTR，以确保请求被正确转发到新的目标
                modifiedExchange.getAttributes().put(GATEWAY_REQUEST_URL_ATTR, newUri);

                // 打印日志，检查请求是否进入了这个过滤器
                System.out.println("进入 CustGatewayFilterFactory，新的请求 URI: " + newUri);
                // // 将修改后的 exchange 传递到链中，进行后续处理
                // return chain.filter(modifiedExchange);
            }
            // 如果路径不匹配，则继续链中的下一个过滤器
            return chain.filter(exchange.mutate()
            .request(
                    new ServerHttpRequestDecorator(exchange.getRequest()) {

                        @Override
                        public InetSocketAddress getRemoteAddress() {
                            return new InetSocketAddress("localhost", 8081);
                        }

                        @Override
                        public URI getURI() {
                            try {
                                System.out.println("+++++++++++++++++++");
                                System.out.println("返回请求uri");
                                return new URI("http://localhost:8081/fn1");
                            } catch (URISyntaxException e) {
                                e.printStackTrace();
                            }
                            return null;
                        }
                        

                        // /**
                        //  * 修改这个主要为了后面的 Filter 获取查询参数是准确的
                        //  *
                        //  * @return
                        //  */
                        // @Override
                        // public MultiValueMap<String, String> getQueryParams() {
                        //     System.out.println("+++++++++++++++++++");
                        //     try {
                        //         return UriComponentsBuilder.fromUri(new URI("http://localhost:8081/fn1")).build().getQueryParams();
                        //     } catch (URISyntaxException e) {
                        //         e.printStackTrace();
                        //     }
                        //     return null;
                        // }
                    }
            ).build()
            );
        };
       
    }

    public static class Config {
        // Put the configuration properties here
    }

    @Override
    public int getOrder() {
        return Ordered.HIGHEST_PRECEDENCE;
    }

}
